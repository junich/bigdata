from lxml import html
import pandas as pd
import requests

import cssselect
import urllib

import enchant
##enchant 가 안돔

import re

def allaboutmovie(Movie_num):
    
##영화 기본정보 가져오기
    All = { 'movie_name':'','movie_genre':"", 'movie_rating':'','review_num': '','earns':"",'start_date':"",'word_Per_review':"" , 'movie_id' :"",'num_special':""}
    
    url ='http://www.imdb.com/title/'
    url = url + Movie_num
    print(url)
    
    resp = requests.get(url)
    resp.encoding = 'utf8'
    text = resp.text
    elem = html.fromstring(text)   
    
    movie_genre = elem.cssselect('div.subtext a span')[0].text_content().strip()
    movie_name = elem.cssselect('div.title_wrapper h1')[0].text_content().strip()
    movie_name  = movie_name.replace('\xa0', '')
    movie_rating = elem.cssselect('div.ratingValue strong span')[0].text_content().strip()
    review_num = elem.cssselect('div.plot_summary_wrapper div')[14].cssselect('span a')[0].text_content().strip()
    review_num  = review_num.replace('user', '')
    review_num  = review_num.replace(',', '')
    review_num = int(review_num)
    earns = elem.cssselect('div.article div.txt-block')[11].text_content().strip()
    earns  = earns.replace('^()$', '')
    earns  = earns.replace('\n', '') ##확실한 수입을 가져오기위하여
    earns  = earns.replace('Gross:        ', '')
    earns  = earns.replace('^()$', '')
    a = re.findall(r'\((.*?)\)', earns)
    start_date = a[1]   
    earns  = earns.replace(a[0], '')                     
    earns  = earns.replace(a[1], '')
    earns  = earns.replace('(', '')
    earns  = earns.replace(')', '')
    earns  = earns.replace(' ', '')
    earns  = earns.replace('$', '')
    earns  = earns.replace(',', '')
    earns = int(earns)
    ###'Gross:        $2,181,290        \n\n      (USA)\n      (20 December 2013)
    
    ###All={ 'movie_name':movie_name, 'movie_rating':movie_rating,'review_num': review_num,'earns':earns }

    Review = []
    num_special=[]
    ##cMax Page 조사
    ur = "http://www.imdb.com/title/" + Movie_num 
    ur = ur + '/reviews?start=30'
    res = requests.get(ur)
    res.encoding = 'utf8'
    tex = res.text
    ele = html.fromstring(tex)
    num=ele.xpath("//div[@id='tn15content']/table")[0].text_content().strip()
    num = num.replace('Page 4 of ', '')
    num = re.sub(r':', '', num)
    num = re.sub(r'\b[[0-9]*]', '', num)
    num = re.sub(r'\[', '', num)
    ##num = num.replace('^?:', '') ##맥스카운트 가져오기. 4페이지까지없으면 오류가능성
    num=int(num)

    
    
    ##max 패이지 까지의 댓글 가저오기 ; 너무 끊겨서 2루했는데 num으루 하면 다J어옴
    for p in range(0,num):
        url1 = 'http://www.imdb.com/title/' + Movie_num + '/reviews?start={}0'.format(p)
        resp1 = requests.get(url1)
        resp1.encoding = 'utf8'
        text1 = resp1.text
        elem1 = html.fromstring(text1)  
    
   
        ##eot댓글 모두 J어오기  댓글 점수 가져오는것물어보기
        articles = elem1.xpath("//div[@id='tn15content']")[0].cssselect('p')
        for a in articles:
            say = a.text_content().strip()
            say =say.replace('Add another review','')
            nstr = re.sub(r'[?|$|.|!]',r'',say)    
            special = len(say)-len(nstr)              
            ### print(say)
            Review.append(say)
            num_special.append(special)
    
    ##단어개수구하기        
    word_num =0
    word_num_temp=0

    num_Review=len(Review)-1
    num_Review = int(num_Review)
    num_Review # 댓글의 총 개수 count 돌리기위해서
    num_Review_list[0:num_Review]
    

    for a in range(0,num_Review):
        word_num_temp=len(re.findall(r'\S+', Review[a]))
        word_num=word_num+word_num_temp     #댓글들의 총 단어수 파악
        num_Review_list.append(word_num_temp) #댓글별 단어길이 파악
    num_special= round(sum(num_special)*100/word_num,2)###특수문자비율 퍼센트!!
    All={ 'movie_name':movie_name, 'movie_genre':movie_genre,'movie_rating':movie_rating,'review_num': review_num,'start_date':start_date,'earns':earns, 'word_Per_review':round(word_num/num_Review,2),'movie_id' :Movie_num, 'num_special':num_special}
    All_ser=pd.Series(All)
    
    
    return (All_ser)
    Total = pd.Series(index=['movie_name', 'movie_rating','review_num','earns','start_date','word_Per_review' , 'movie_id','num_special'])



###진짜시작!!
Total = pd.Series(index=['movie_name', 'movie_rating','review_num','earns','start_date','word_Per_review' , 'movie_id','num_special'])

movie = ['tt0468569','tt1490017','tt0371746','tt1228705','tt0848228','tt2395427','tt0800080']
'''
tt2395427 ; avengers age of ultron
tt0848228 ; the avengers
tt0371746 ; Ironman
tt1490017 ; LegoMovie
tt0468569 ; dark night
tt1228705 ; iron man2
tt0800080 ;incredible hulk
'''
for p in range(0,7):
    Total=pd.concat([Total,allaboutmovie(movie[p])],axis=1)
    
Total.columns= Total.iloc[2]    
Total=Total.transpose()
Total.sort(['movie_rating'], ascending=[True], inplace=True)
    
